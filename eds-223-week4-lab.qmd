---
title: "EDS Wek 4 Lab"
author: "Caroline Edmonds"
format: html
editor: visual
---

```{r}
# Libraries
install.packages("geodata")
install.packages("kableExtra")
library(terra)
library(tidyverse)
library(tmap)
library(geodata)
library(kableExtra)
library(spData)
library(spDataLarge)
```

```{r}
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))

# test class of raster object
class(zion_elevation)
```
```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(legend.outside = TRUE)

map2 <- tm_shape(zion_land) +
  tm_raster(title = "Land cover") +
  tm_layout(legend.outside = TRUE)

tmap_arrange(map1, map2, nrow = 1)
```


```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge")) #tifs can handle image data

nlyr(landsat) # test number of layers in raster object
```


```{r}

tm_shape(landsat) +
  tm_raster(title = "Unscaled reflectance") #4 different matrixes or bands of light

#facet plot equivalent

```


```{r}
#We can subset layers using either the layer number or name:
landsat3 <- subset(landsat, 3)
landsat4 <- subset(landsat, "landsat_4")

#map of just landsat band 3
tm_shape(landsat3) +
  tm_raster(title = "Band 3") +
  tm_layout(legend.outside = TRUE)

#We can combine SpatRaster objects into one, using c():
landsat34 <- c(landsat3, landsat4)

```


```{r}
#understand our data better

global(zion_elevation, mean)

freq(zion_land)
```


##Indexing
```{r}
zion_elevation[1,1] #first cell
zion_elevation[1]

landsat[1] #get first row of all bands

#update values in fisrt row of all the layers/bands
landsat[1] <- 0

test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA

```


##Spatial Subsetting
```{r}
point <- matrix(c(-113, 37.5), ncol =2)

terra::extract(zion_elevation, point)
```

```{r}
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
               resolution = 0.3,
               vals = 1)

zion_elevation_clip <- zion_elevation[clip, drop = FALSE] #if set to true will only store data as df not a raster, to keep as raster need drop = FALSE

tm_shape(zion_elevation) +
  tm_raster()

tm_shape(zion_elevation_clip) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(legend.outside = TRUE)
```


##Masking
```{r}
# create raster mask of the same resolution and extent
rmask <- zion_elevation

# set all cells with elevation less than 2000 meters to NA
rmask[rmask < 2000] <- NA
 
# subset elevation raster based on mask

# approach 1: bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]  
#see summary now mask min is 2000

# approach 2: mask() function
masked2 <- mask(zion_elevation, rmask)   

tm_shape(masked1)+
  tm_raster(title = "Elevation (m) > 2000") +
  tm_layout(legend.outside = TRUE)
```

## Local Operations
```{r}
#basic arithmetic across the layer
zion_elevation^2
log(zion_elevation)

#boolean logic
zion_elevation > 5 #goes through each and gives a cell a true or false value


```

```{r}
#create a matrix to splilt elevation values into 4 classes
rcl <- matrix(c(1000, 1500, 1, 
                 1500, 2000, 2,
                 2000, 2500, 3,
                 2500, 3000, 4),
               ncol = 3, byrow = TRUE)

# use reclassification matrix to reclassify elevation raster
reclassified <- terra::classify(zion_elevation, rcl = rcl)

# change reclassified values into factors
values(reclassified) <- as.factor(values(reclassified))

# plot original and reclassified elevation rasters
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original") +
  

map2 <- tm_shape(reclassified) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "reclassified")

tmap_arrange(map1, map2, nrow = 1) 

```

```{r}
#create NDVI function
ndvi_fun <- function(nir, red) {
  (nir - red) / (nir + red)
}

# apply NDVI function to Landsat bands 3 & 4
ndvi_rast <- terra::lapp(landsat[[c(4, 3)]], fun = ndvi_fun)

#plot NDVI in Zion
tm_shape(ndvi_rast) +
  tm_raster(title = "NDVI")

```

## Focal Operations
```{r}
elevation_focal <- focal(zion_elevation, 
                         w = matrix(1, nrow = 9, ncol = 9), # create moving window, neighborhood of cells
                         fun = min) # function to map new values to focal cells
#output = spatRaster

```

```{r}
tm_shape(elevation_focal) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(legend.outside = TRUE)


#compare the 2
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(elevation_focal) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

tmap_arrange(map1, map2, nrow = 1) 
```


## Zonal Operations

```{r}
terra::zonal(zion_elevation, reclassified, fun = "mean") %>% #data, group_by/function, what function
  kable(col.names = c("Elevation zone", "Mean elevation (m)")) %>% 
  kable_styling(bootstrap_options = "basic") #basic, striped, bordered, hover, condensed, responsive, none
```

## Global

```{r}
terra::global(zion_elevation, mean)
```


# Now We Change Geometries

## Change the extent
```{r}
 
elev <- terra::extend(zion_elevation, c(1, 200))                          
elev_2 <- extend(zion_elevation, c(1, 200)) # add one row and two columns

#Performing algebraic operations on objects with different extents doesn’t work.

elev + elev_2 # must match in row and column to do this

#We can align the extent of the 2 rasters using the extend() function. Here we extend the zion_elevation object to the extent of elev_2 by adding NAs.

elev_3 <- extend(zion_elevation, elev_2)
```


## Orgin
```{r}
#The origin function returns the coordinates of the cell corner closes to the coordinates (0,0).

origin(zion_elevation)

#use to check where rasters' orgins are

[1] -0.0004165537 -0.0004165677
```


##Resolution

###Aggregate
When decreasing the resolution of rasters, we are effectively combining multiple celss into a single cell. Let’s start by coarsening the resolution of the Zion elevation data by a factor of 5, by taking the mean value of cells.
```{r}

zion_elevation_coarse <-  aggregate(zion_elevation,
                                    fact = 5,
                                    fun = mean)

```

```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(zion_elevation_coarse) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

tmap_arrange(map1, map2, nrow = 1) 
```


###Disaggregate
To increase the resolution of a raster, we need to break a single cell into multiple cells. There are many ways to do this and the appropriate method will often depend on our specific purpose. However, most approaches define the values of the new (smaller) cells based on not only the value of the original cell they came from, but also neighboring cells.

```{r}
# disaggregate the aggregated raster
zion_elevation_disagg <- disagg(zion_elevation_coarse, fact = 5, method = "bilinear")

# check whether the disaggregated version matches the original
if(identical(zion_elevation, zion_elevation_disagg)){
  print("disaggregated data matches original")
} else {
  warning("disaggregated data does not match original")
}
```
####Aggregrate vs Disaggregate
```{r}
map3 <- tm_shape(zion_elevation_disagg) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "disaggregated")

tmap_arrange(map1, map2, map3, nrow = 1) 
```


## Resampling

Aggregation/disaggregation work when both rasters have the same origins.

But what do we do in the case where we have two or more rasters with different origins and resolutions? Resampling computes values for new pixel locations based on custom resolutions and origins.

The images below show that we are trying to find the values of the original raster within the cells defined by the new “target” raster. The new values are calculated based on the values of the original raster cells that overlap with the target raster cells.


```{r}
target_rast <- rast(xmin = -113.2, xmax = -112.9,
                   ymin = 37.14, ymax = 37.5,
                   nrow = 450, ncol = 460, 
                   crs = crs(zion_elevation))

zion_elevation_resample <- terra::resample(zion_elevation, y = target_rast, method = "bilinear")
```

```{r}
map4 <- tm_shape(zion_elevation_resample) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "resampled")

tmap_arrange(map1, map4, nrow = 1) 
```





